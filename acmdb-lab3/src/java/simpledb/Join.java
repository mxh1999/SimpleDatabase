package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private Tuple now1,now2;
    private HashEquiJoin has;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p=p;
        this.child1 = child1;
        this.child2 = child2;
        if (p.getOperator().equals(Predicate.Op.EQUALS)) this.has = new HashEquiJoin(p,child1,child2);else this.has = null;
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        if (this.has != null) this.has.open();
        child1.open();
        child2.open();
        super.open();
        now1=now2=null;
    }

    public void close() {
        if (this.has != null) this.has.close();
        super.close();
        child1.close();
        child2.close();
        now1=now2=null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        if (this.has != null) this.has.rewind();
        child1.rewind();
        child2.rewind();
        now1=now2=null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (this.has != null) return this.has.fetchNext();
        while (true) {
            if (now1 == null) {
                if (!child1.hasNext()) return null;
                now1 = child1.next();
                child2.rewind();
            }
            while (child2.hasNext()) {
                now2 = child2.next();
                if (p.filter(now1,now2)) return Tuple.merge(now1,now2);
            }
            now1=null;
        }
    }

    @Override
    public DbIterator[] getChildren() {
        if (this.has != null) return this.has.getChildren();
        DbIterator[] ans = new DbIterator[2];
        ans[0]=child1;
        ans[1]=child2;
        return ans;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if (this.has != null) this.has.setChildren(children);
        child1 = children[0];
        child2 = children[1];
    }

}
